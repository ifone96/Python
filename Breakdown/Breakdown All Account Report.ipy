from ast import If
import datetime
import glob
import os
import shutil
from tkinter import HIDDEN
import uuid
from doctest import DocFileTest
from email.utils import format_datetime
from math import fabs
from operator import index
from pickle import NONE
import pandas as pd
import pyodbc
import xlsxwriter
from matplotlib.pyplot import axis

# server = 'localhost\sqlexpress' # for a named instance
# server = 'myserver,port' # to specify an alternate port
server = 'collectius-mis.database.windows.net'
database = 'reporting'
username = 'mis_TH'
password = '*93RrUFds6@q'
connect_database = pyodbc.connect(
    'DRIVER={ODBC Driver 17 for SQL Server};SERVER='+server+';DATABASE='+database+';UID='+username+';PWD=' + password)

# DS
print(f"RUN PYTHON file: Breakdown All Account Report.py \n server = collectius-mis.database.windows.net \n database = reporting \n SQL query DS..." )
sql_cmd_DS = """

--DS--
SELECT [Report_Date]
      ,[Account_Number]
      ,[Card_Number]
      ,[Customer_Name]
      ,[Seller]
      ,[Business]
      ,[Base_Portfolio]
      ,[Reporting_Portfolio]
      ,[GCV]
      ,[PV]
      ,[Outstanding_Balance]
      ,[Outstanding_Principal]
      ,[Stage]
      ,[Write_Off_Year]
      ,[Write_Off_Month]
      ,[Load_Date]
      ,[Last_Call_Date]
      ,[Call_Time]
      ,[Days_Last_Called]
      ,[Last_Called_Date_Bucket]
      ,[Last_Called_By]
      ,[Last_Call_Outcome]
      ,[Last_Call_Disposition]
      ,[Call_Type]
      ,[Last_PP_Date]
      ,[Days_Last_PP]
      ,[Last_PP_Date_Bucket]
      ,[Commission_Owner]
      ,[Installment_Amount]
      ,[Plan_Balance]
      ,[Last_Action_Date]
      ,[Country]
      ,[Country_Alpha2]
      ,[Days_Last_Actioned]
      ,[Last_Action_Date_Bucket]
      ,[3_Days_Not_Called]
      ,[3_Days_Not_Actioned]
      ,[New_Load_Not_Called]
      ,[30_Days_Not_Actioned]
      ,[AgencyCountrySpecific]
      ,[Agency]
      ,[Unit]
      ,[Plan_Status]
      ,[Principal_Value]
      ,[debt_amount]
      ,[Last_Task]
      ,[Last_Task_Date]
      ,[Product_Type]
      ,[Takeover_Memo]
  FROM [Report].[vw_Account_Breakdown_TH]
  WHERE Base_Portfolio IN ('MONIX SVC TH','ULITE SVC TH','GRAB SVC TH','KLINE W SVC TH','KLINE B SVC TH','SEAMONEY SPL SVC TH','SEAMONEY BCL SVC TH','Minor SVC TH','ALPHA AMC SVC TH')
  AND Stage NOT IN ('Closed','Pending Close Review')
  ORDER BY Base_Portfolio, Last_Action_Date DESC

            """
df_sql_DS = pd.read_sql(sql_cmd_DS, connect_database)
print("SQL query DS...is DONE!")

#   DP
print("SQL query DP...")
sql_cmd_DP = """

--DP--
SELECT [Report_Date]
      ,[Account_Number]
      ,[Card_Number]
      ,[Customer_Name]
      ,[Seller]
      ,[Business]
      ,[Base_Portfolio]
      ,[Reporting_Portfolio]
      ,[GCV]
      ,[PV]
      ,[Outstanding_Balance]
      ,[Outstanding_Principal]
      ,[Stage]
      ,[Write_Off_Year]
      ,[Write_Off_Month]
      ,[Load_Date]
      ,[Last_Call_Date]
      ,[Call_Time]
      ,[Days_Last_Called]
      ,[Last_Called_Date_Bucket]
      ,[Last_Called_By]
      ,[Last_Call_Outcome]
      ,[Last_Call_Disposition]
      ,[Call_Type]
      ,[Last_PP_Date]
      ,[Days_Last_PP]
      ,[Last_PP_Date_Bucket]
      ,[Commission_Owner]
      ,[Installment_Amount]
      ,[Plan_Balance]
      ,[Last_Action_Date]
      ,[Country]
      ,[Country_Alpha2]
      ,[Days_Last_Actioned]
      ,[Last_Action_Date_Bucket]
      ,[3_Days_Not_Called]
      ,[3_Days_Not_Actioned]
      ,[New_Load_Not_Called]
      ,[30_Days_Not_Actioned]
      ,[AgencyCountrySpecific]
      ,[Agency]
      ,[Unit]
      ,[Plan_Status]
      ,[Principal_Value]
      ,[debt_amount]
      ,[Last_Task]
      ,[Last_Task_Date]
      ,[Product_Type]
      ,[Takeover_Memo]
  FROM [Report].[vw_Account_Breakdown_TH]
  WHERE Base_Portfolio IN ('GRAB R2 1 TH','KKP1 TH','BMW1 TH','SME1 TH','SME2 TH','TMB1 TH','TMB2 TH', 'AEON1 TH','AEON2 TH','AEON3 TH')
  AND Stage NOT IN ('Closed','Pending Close Review')
  ORDER BY Base_Portfolio, Last_Action_Date DESC

            """
df_sql_DP = pd.read_sql(sql_cmd_DP, connect_database)
print("SQL query DP...is DONE!")

# Set name file with date/times
todaysdate_filename = str(
    datetime.datetime.now().strftime("%Y%m%d_BreakdownPowerBI")) + '.xlsx'
writer = pd.ExcelWriter(todaysdate_filename)
print("Writing File : " + todaysdate_filename)
print("Writing Sheet...")
df_sql_DS.to_excel(writer, index=False, engine='xlsxwriter', sheet_name='DS')
print("...DS")
df_sql_DP.to_excel(writer, index=False, engine='xlsxwriter', sheet_name='DP')
print("...DP")

print("Setting Format...")
workbook = writer.book
worksheet = writer.sheets['DS']
worksheet2 = writer.sheets['DP']
header_format = workbook.add_format({'bold': True})

worksheet.set_row(0, None, header_format)
worksheet2.set_row(0, None, header_format)

print("Setting Format...is DONE!")

writer.save()
print("Saved " + todaysdate_filename)
print(todaysdate_filename + " is DONE!")

# Open file or folder on OS
path_url = r"Z:\\MIS\\Fone Wasin\\Python\\Breakdown\\"
path_file = path_url + "\\*.xlsx"
for filex in glob.iglob(path_file, recursive=True):
    os.path.realpath(path_url)
    # FBI OPEN UP!!!!
    #os.startfile(path_url)
    os.startfile(filex)
    print('Opened File&Folder:', filex)
